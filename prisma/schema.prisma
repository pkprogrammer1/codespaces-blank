generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents a user in the system
/// @see prisma/models/user.ts for TypeScript interface
model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]
  payments  Payment[]
  rides     Ride[]

  @@map("users")
}

/// Represents a ride/trip in the system
/// @see prisma/models/ride.ts for TypeScript interface
model Ride {
  id             String    @id @default(cuid())
  from           String
  to             String
  price          Float
  userId         String
  fromLocationId String?
  toLocationId   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  payment        Payment?
  fromLocation   Location? @relation("RideFrom", fields: [fromLocationId], references: [id])
  toLocation     Location? @relation("RideTo", fields: [toLocationId], references: [id])
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rides")
}

/// Represents a payment for a ride
/// @see prisma/models/payment.ts for TypeScript interface
model Payment {
  id        String   @id @default(cuid())
  amount    Float
  status    String
  method    String
  rideId    String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

/// Represents a saved location/address
/// @see prisma/models/location.ts for TypeScript interface
model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ridesFrom Ride[]   @relation("RideFrom")
  ridesTo   Ride[]   @relation("RideTo")

  @@map("locations")
}
